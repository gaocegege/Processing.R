#!/usr/bin/env python3

import yaml
import os

e2e_test_dir = 'src/test/e2e/core/function'
reference_dir = 'examples/reference/'

default_yml_file = '.test.yml'

class Generator(object):
    def __init__(self):
        self.output_dir = e2e_test_dir
        self.reference_dir = reference_dir
    
    def generate(self):
        for dirname in os.listdir(self.reference_dir):
            item_dir = os.path.join(self.reference_dir, dirname)
            for subdir_name in os.listdir(item_dir):
                TestCaseGenerator(
                    subdir_name, os.path.join(item_dir, subdir_name), e2e_test_dir).generate()

class TestCaseGenerator(object):
    def __init__(self, name, input_dir, output_dir):
        self.name = name
        self.class_name = self.upcase_first_letter(name) + "Test"
        self.input_dir = input_dir
        self.output_dir = output_dir
        self.output_file = os.path.join(self.output_dir, ('%s.java' % self.class_name))

    def generate(self):
        builder = TemplateBuilder(self.class_name)

        yaml_file = os.path.join(self.input_dir, default_yml_file)
        if os.path.isfile(yaml_file) is not True:
            return
        with open(yaml_file, 'r') as f:
            config = yaml.load(f.read())
            print(config)
            builder.set_reference_url(config['test']['reference'])

        code_file = os.path.join(self.input_dir, ('%s.rpde' % self.name))
        with open(code_file, 'r') as f:
            code = f.read()
            actual_code = ''
            # Insert the save logic into the code.
            if 'draw <- function' in code:
                pos = code.index('draw <- function')
                for i in range(pos, len(code) - 1):
                    if code[i] is '\n' and code[i + 1] is '}':
                        footer = '\n    saveFrame("%s")\n    exit()\n'
                        actual_code = code[:i] + footer + code[i+1:]
            else:
                footer = 'saveFrame("%s")\nexit()\n'
                actual_code = '%s\n%s' % (code, footer)
            actual_code = actual_code.replace('\n', '\\n')
            actual_code = actual_code.replace('"', '\\"')
            builder.set_core_code(actual_code)

        with open(self.output_file, 'w+') as f:
            print(self.output_file)
            f.write(builder.generate_code())

    @staticmethod
    def upcase_first_letter(s):
        return s[0].upper() + s[1:]

class TemplateBuilder(object):
    def __init__(self, name):
        self.name = name

    def set_core_code(self, code):
        self.coreCode = code
        return self
    
    def set_reference_url(self, url):
        self.referenceURL = url
        return self

    def generate_code(self):
        if self.name is not None\
        and self.referenceURL is not None\
        and self.coreCode is not None:
            return self.template() % (self.name, self.name, self.coreCode, self.referenceURL)

    def template(self):
        return """
// Generated by hack/generate-e2e-test.py
package test.e2e.core.function;

import static org.junit.Assert.fail;
import org.junit.Test;
import test.e2e.core.E2eTestBase;

public class %s extends E2eTestBase {

  public %s() {
    coreCodeTemplate = "%s";
    referenceURI = "%s";
  }

  @Test
  public void test() {
    try {
      defaultOperation();
    } catch (Exception exception) {
      System.err.println(exception);
      fail("Should not have thrown any exception");
    }
  }
}
"""

if __name__ == '__main__':
    Generator().generate()
