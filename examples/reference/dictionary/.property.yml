category: Data
subcategory: Composite
description: "
A dictionary is a Python data structure that stores a number of values,
referenced by key. It's similar to a list, except values are accessed by keys
of arbitrary types (usually strings), instead of with sequential integer
indexes. Python's dictionary type is similar to \"Maps\" in Java, associative
arrays in PHP, or hashes in Perl.<br/><br/>

In Python, dictionary values can be of any type (and types can vary from one
key/value pair to the next in the same dictionary). Keys can be of any type, as
long as that type is \"hashable\" (see <a
href=\"https://docs.python.org/2/glossary.html#term-hashable\">the Python
glossary</a> for more information).<br/><br/>

Note that while Python remembers all key/value pairs added to a dictionary, it
does not remember the <i>order</i> in which key/value pairs were added.  As a
consequence, when iterating over key/value pairs in a dictionary (with, e.g.,
the <b>iteritems()</b> method shown in the example above), the key/value pairs
will come back in an arbitrary order, which may vary from one execution of your
program to the next.<br/><br/>

"
syntax: "d = {}\nd = dict()\nd = {key: value, key2: value}"
parameters:
  - label: 'key'
    description: "any immutable object; used to index the dictionary (ex. String or int)"
  - label: 'value'
    description: "any value to be stored in the dictionary"
related:
  - curlybraces
  - indexbrackets
